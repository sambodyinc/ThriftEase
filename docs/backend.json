{
  "entities": {
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product available for sale in the thrift store.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product."
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "price": {
          "type": "number",
          "description": "Price of the product."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the product."
        },
        "category": {
          "type": "string",
          "description": "Category the product belongs to (e.g., shirts, dresses)."
        },
        "condition": {
          "type": "string",
          "description": "Condition of the product (e.g., Like New, Gently Used)."
        },
        "size": {
          "type": "string",
          "description": "Size of the product (e.g., S, M, L)."
        },
        "color": {
          "type": "string",
          "description": "Color of the product."
        },
        "images": {
          "type": "array",
          "description": "Array of URLs pointing to product images stored in Firebase Storage.",
          "items": {
            "type": "string"
          }
        },
        "isFeatured": {
          "type": "boolean",
          "description": "Indicates if the product is featured on the home page."
        },
        "isSold": {
          "type": "boolean",
          "description": "Indicates if the product has been sold."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the product was added to the system.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "price",
        "description",
        "category",
        "condition",
        "size",
        "color",
        "images",
        "isFeatured",
        "isSold",
        "createdAt"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a registered user of the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user (Firebase UID)."
        },
        "name": {
          "type": "string",
          "description": "User's full name."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "photoURL": {
          "type": "string",
          "description": "URL of the user's profile picture."
        },
        "wishlist": {
          "type": "array",
          "description": "Array of product IDs representing the user's wishlist.",
          "items": {
            "type": "string"
          }
        },
        "phone": {
          "type": "string",
          "description": "User's phone number."
        },
        "address": {
          "type": "string",
          "description": "User's address."
        }
      },
      "required": [
        "id",
        "name",
        "email"
      ]
    },
    "GuestOrder": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GuestOrder",
      "type": "object",
      "description": "Represents an order placed by a guest user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the guest order."
        },
        "guestId": {
          "type": "string",
          "description": "Unique identifier for the guest user (generated)."
        },
        "name": {
          "type": "string",
          "description": "Guest user's name."
        },
        "phone": {
          "type": "string",
          "description": "Guest user's phone number."
        },
        "email": {
          "type": "string",
          "description": "Guest user's email address."
        },
        "address": {
          "type": "string",
          "description": "Guest user's address."
        },
        "items": {
          "type": "array",
          "description": "Array of product IDs and quantities in the order.",
          "items": {
            "type": "string"
          }
        },
        "total": {
          "type": "number",
          "description": "Total amount of the order."
        },
        "status": {
          "type": "string",
          "description": "Status of the order (e.g., pending, processing, completed)."
        },
        "paymentMethod": {
          "type": "string",
          "description": "Payment method used for the order."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp indicating when the order was placed.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "guestId",
        "name",
        "phone",
        "address",
        "items",
        "total",
        "status",
        "paymentMethod",
        "timestamp"
      ]
    },
    "UserOrder": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserOrder",
      "type": "object",
      "description": "Represents an order placed by a registered user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user order."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N UserOrder)"
        },
        "items": {
          "type": "array",
          "description": "Array of product IDs and quantities in the order.",
          "items": {
            "type": "string"
          }
        },
        "total": {
          "type": "number",
          "description": "Total amount of the order."
        },
        "status": {
          "type": "string",
          "description": "Status of the order (e.g., pending, processing, completed)."
        },
        "paymentMethod": {
          "type": "string",
          "description": "Payment method used for the order."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp indicating when the order was placed.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "items",
        "total",
        "status",
        "paymentMethod",
        "timestamp"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Represents a product available for sale. Includes standard product attributes.",
          "params": [
            {
              "name": "productId",
              "description": "Unique identifier for the product."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information. Only the user can read/write their own document.",
          "params": [
            {
              "name": "userId",
              "description": "Firebase UID of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/user_orders/{orderId}",
        "definition": {
          "entityName": "UserOrder",
          "schema": {
            "$ref": "#/backend/entities/UserOrder"
          },
          "description": "Represents orders placed by registered users. Only the user can read/write their own orders.",
          "params": [
            {
              "name": "userId",
              "description": "Firebase UID of the user who placed the order."
            },
            {
              "name": "orderId",
              "description": "Unique identifier for the user order."
            }
          ]
        }
      },
      {
        "path": "/guest_orders/{orderId}",
        "definition": {
          "entityName": "GuestOrder",
          "schema": {
            "$ref": "#/backend/entities/GuestOrder"
          },
          "description": "Stores orders placed by guest users.  No authentication required to create.",
          "params": [
            {
              "name": "orderId",
              "description": "Unique identifier for the guest order."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{userId}",
        "definition": {
          "entityName": "AdminRole",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Indicates admin privileges for a user. Existence of the document grants admin access.",
          "params": [
            {
              "name": "userId",
              "description": "Firebase UID of the admin user."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to provide a secure, scalable, and debuggable solution for the ThriftEase application, adhering to the principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are not Filters). This design prioritizes denormalization to avoid hierarchical authorization dependencies (`get()` calls) and supports secure list operations.\n\n**Authorization Independence via Denormalization:**\nAuthorization data is denormalized to prevent the need for `get()` calls in security rules. For instance, access to user-specific data, like orders, is controlled directly through path-based ownership (`/users/{userId}/user_orders/{orderId}`), eliminating the need to check user roles or permissions from other documents.\n\n**Structural Segregation:**\nThe structure segregates data based on access requirements. User-specific data is stored under `/users/{userId}`, while products are stored in a separate `/products` collection. This separation simplifies security rules and ensures that documents within a collection share the same security posture.\n\n**Access Modeling:**\n- **Private Data:** User-specific data (e.g., wishlist, user orders) is stored under `/users/{userId}`, enforcing path-based ownership.\n- **Collaborative Data:** The application does not require collaborative data.\n- **Global Roles:**  Admin users can be managed through a dedicated `/roles_admin/{uid}` collection.\n\n**QAPs (Rules are not Filters):**\nThe structure supports secure `list` operations by ensuring that the security rules can efficiently determine access based on the path and the requesting user's authentication status. For example, listing products does not require filtering based on user-specific criteria; the rules simply allow read access to the `/products` collection.\n\n**Invariants:**\nOwnership, timestamps, and denormalized data are enforced through security rules to maintain data integrity. For example, the `userId` field in `/users/{userId}/user_orders/{orderId}` must match the authenticated user's UID."
  }
}
    